<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_ if (primaryKey.composite) { _%>
    <%
    const variablesWithTypes = generateEntityClientFields(primaryKey, fields, relationships, dto, undefined, embedded);
    const typeImports = generateEntityClientImports(relationships, dto);
    const enumImports = generateEntityClientEnumImports(fields);
    %>
    <%_
    // Saathratri Modification
    const variablesWithTypesPrimaryKey = getCompositePrimaryKeyClientServiceModelPrimaryKeyVariableDeclarationStatements(variablesWithTypes);
    const variablesWithTypesNonPrimaryKey = getCompositePrimaryKeyClientServiceModelNonPrimaryKeyVariableDeclarationStatements(variablesWithTypes);
    const defaultVariablesValues = getCompositePrimaryKeyClientModelGenerateEntityClientFieldDefaultValues();
    // End of Saathratri Modification
    
    // Saathratri:
    if (primaryKey.composite && isCompositePrimaryKeyClientWithUtcField()) { 
    _%>
        import dayjs from 'dayjs/esm';
    <%_ 
      } // Saathratri 
    _%>
    <%_ if (fieldsContainInstant || fieldsContainZonedDateTime || fieldsContainLocalDate) { _%>
    import dayjs from 'dayjs/esm';
    <%_ } _%>
    <%_ typeImports.forEach((importedPath, importedType) => { _%>
        <%_ if (importedType !== `I${entityAngularName}`) { _%>
    import { <%- importedType %> } from '<%- importedPath %>';
        <%_ } _%>
    <%_ }); _%>
    <%_ enumImports.forEach((importedPath, importedType) => { _%>
    import { <%- importedType %> } from '<%- importedPath %>';
    <%_ }); _%>
    
    <%_ 
       // Saathratri:
       if (!primaryKey.composite) { 
    _%>
    export interface I<%= entityAngularName %> {
    <%_ variablesWithTypes.forEach(variablesWithType => { _%>
        <%- variablesWithType %>;
    <%_ }); _%>
    }
    
    export class <%= entityAngularName %> implements I<%= entityAngularName %> {
        constructor(
    <%_ variablesWithTypes.forEach(variablesWithType => { _%>
            public <%- variablesWithType %>,
    <%_ }); _%>
        ) {
    <%_ for (idx in defaultVariablesValues) { _%>
            <%- defaultVariablesValues[idx] %>
    <%_ } _%>
        }
    }
    <%_ if (primaryKey) { _%>
    
    export function get<%= entityAngularName %>Identifier(<%= entityInstance %>: I<%= entityAngularName %>): <%= primaryKey.tsType %> | undefined {
      return <%= entityInstance %>.<%= primaryKey.name %>;
    }
    <%_
      // Saathratri Modification
      } _
    } else { _%>
    export interface I<%= entityAngularName %> {
        public id?: <%= entityAngularName %>Id,
    <%_ variablesWithTypesNonPrimaryKey.forEach(variablesWithType => { _%>
        <%- variablesWithType %>;
    <%_ }); _%>
    }
    
    export interface I<%= entityAngularName %>Id {
    <%_ variablesWithTypesPrimaryKey.forEach(variablesWithType => { _%>
        <%- variablesWithType %>;
    <%_ }); _%>
    }
    
    export class <%= entityAngularName %> implements I<%= entityAngularName %> {
        constructor(
            public id?: <%= entityAngularName %>Id,
    <%_ variablesWithTypesNonPrimaryKey.forEach(variablesWithType => { _%>
            public <%- variablesWithType %>,
    <%_ }); _%>
        ) {}
    }
    
    export class <%= entityAngularName %>Id implements I<%= entityAngularName %>Id {
        constructor(
    <%_ variablesWithTypesPrimaryKey.forEach(variablesWithType => { _%>
            public <%- variablesWithType %>,
    <%_ }); _%>
        ) {
        }
    }
    
    export function get<%= entityAngularName %>Identifier(<%= entityInstance %>: I<%= entityAngularName %>): I<%= entityAngularName %>Id | undefined {
        return <%= entityInstance %>.<%= primaryKey.name %>;
    }
    <%_
      // End of Saathratri Modification
    _%>
    
    <%_ } _%>
    <%_ } else { _%>
    <%
    const enumImports = generateEntityClientEnumImports(fields);
    %>
    <%_ if (fieldsContainInstant || fieldsContainZonedDateTime || fieldsContainLocalDate) { _%>
    import dayjs from 'dayjs/esm';
    <%_ } _%>
    <%_ for (const relationshipsByType of Object.values(differentRelationships).filter(relationshipsByType => relationshipsByType.some(relationship => (relationship.ownerSide || relationship.relationshipManyToMany) && relationship.otherEntity.entityAngularName !== entityAngularName))) {
          const { otherEntity } = relationshipsByType[0];
    _%>
    import { I<%- otherEntity.entityAngularName %> } from 'app/entities/<%= otherEntity.entityClientRootFolder %><%= otherEntity.entityFolderName %>/<%= otherEntity.entityFileName %>.model';
    <%_ } _%>
    <%_ enumImports.forEach((importedPath, importedType) => { _%>
    import { <%- importedType %> } from '<%- importedPath %>';
    <%_ }); _%>
    
    export interface I<%= entityAngularName %> {
    <%_ for (const field of fields) {
          const { fieldName, fieldValidationRequired, tsType, id } = field;
    _%>
      <%= fieldName %><% if (!id /* && !fieldValidationRequired */) { %>?<% } %>: <%= tsType %><% if (!id /* && !fieldValidationRequired */) { %> | null<% } %>;
      <%_ if (field.fieldTypeBinary && !field.blobContentTypeText) { _%>
      <%= fieldName %>ContentType<% if (!id /* && !fieldValidationRequired */) { %>?<% } %>: string<% if (!id /* && !fieldValidationRequired */) { %> | null<% } %>,
      <%_ } _%>
    <%_ } _%>
    <%_ for (const relationship of relationships.filter(relationship => relationship.ownerSide || relationship.relationshipManyToMany)) {
          const { propertyName, relationshipRequired, otherEntity, id, collection, otherEntityField, relationshipFieldName } = relationship;
    _%>
      <%= propertyName %>?: Pick<I<%= otherEntity.entityAngularName %>, '<%= otherEntity.primaryKey.name %>'<% if (otherEntity.primaryKey.name !== otherEntityField) { %> | '<%= otherEntityField %>'<% } %> <% if (isOptionToDisplayInGuiEnabled) { %> <%- getClientOptionToDisplayForModel(otherEntity, relationshipFieldName, otherEntityField) %> <% } %> ><% if (collection) { %>[]<% } %> | null;
    <%_ } _%>
    }
    <%_ if (primaryKey) { _%>
    
    export type New<%= entityAngularName %> = Omit<I<%= entityAngularName %>, '<%= primaryKey.name %>'> & { <%= primaryKey.name %>: null };
    <%_ } _%>
    <%_ } _%>